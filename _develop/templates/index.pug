//- index.pug
//- extends layouts/default.pug

//- page variables
//- block pageVariables
  - title = "Build a Technical Documentation Page";
  - bodyClass = "";
  - page = "index";
  - pageType = 'sub-page';
  - pageClass = 'main-page';

//- block prepend head
//- block head
//- block append head

//- block prepend header
//- block header
//- block append header

//- block content

//- block prepend footer
//- block footer
//- block append footer

//- block prepend scripts
//- block scripts
//- block append scripts

extends layouts/default.pug

//- page variables
block pageVariables
  - title = "Build a Technical Documentation Page";
  - page = 'index';
  - pageType = 'home-page';
  - pageClass = 'home-page';

block content
  
  main#main-doc

    +section('main-section flexbox_introduction', 'flexbox_introduction') 
      header 
        h2 Flexbox Introduction
      article 
        p The Flexbox Layout (Flexible Box) module (
          a(href="https://www.w3.org/TR/css-flexbox/" target="_blank") W3C Candidate Recommendation as of October 2017
          | ) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word "flex").
        p The main idea behind the flex layout is to give the container the ability to alter its items' width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.
        p Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).
        p 
          strong Note: 
          | Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the 
          a(href="http://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank") Grid
          | layout is intended for larger scale layouts.

    +section('main-section display', 'display') 
      header 
        h2 Display
      article
        p This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.
        pre
          +code-css('.container', [['display', 'flex', '/* or inline-flex */']])
        p Note that CSS columns have no effect on a flex container.

    +section('main-section flex_direction', 'flex_direction') 
      header 
        h2 Flex Direction
      article
        p This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.
        pre
          +code-css('.container', [['flex-direction', 'row | row-reverse | column | column-reverse', '']])           
        ul
          li 
            code row
            |  (default): left to right in 
            code ltr
            | ; right to left in 
            code rtl
          li 
            code row-reverse
            |  : right to left in 
            code ltr
            | ; left to right in 
            code rtl
          li 
            code column
            |  : same as 
            code row
            |  but top to bottom
          li 
            code column-reverse
            |  : same as 
            code row-reverse
            |  but bottom to top

    +section('main-section flex_wrap', 'flex_wrap') 
      header 
        h2 Flex Wrap
      article
        p By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
        pre
          +code-css('.container', [['flex-wrap', 'nowrap | wrap | wrap-reverse', '']])   
        ul
          li 
            code nowrap
            |  (default): all flex items will be on one line
          li 
            code wrap
            |  : flex items will wrap onto multiple lines, from top to bottom.
          li 
            code wrap-reverse
            |  : flex items will wrap onto multiple lines from bottom to top.
        p There are some 
          a(href="https://css-tricks.com/almanac/properties/f/flex-wrap/" target="_blank") visual demos of flex-wrap here
          | .

    +section('main-section flex_flow', 'flex_flow') 
      header 
        h2 Flex Flow
      article
        p This is a shorthand
          code flex-direction
          |  and 
          code flex-wrap
          |  properties, which together define the flex container's main and cross axes. Default is 
          code row nowrap
          | .
        pre
          +code-css('.container', [['flex-flow', '<‘flex-direction’> || <‘flex-wrap’>', '']])

    +section('main-section justify_content', 'justify_content') 
      header 
        h2 Justify Content
      article
        p This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.
        pre
          +code-css('.container', [['justify-content', 'flex-start | flex-end | center | space-between | space-around | space-evenly', '']])
        ul
          li 
            code flex-start
            |  (default): items are packed toward the start line
          li 
            code flex-end
            |  : items are packed toward to end line
          li 
            code center
            |  : items are centered along the line
          li 
            code space-between
            |  : items are evenly distributed in the line; first item is on the start line, last item on the end line
          li 
            code space-around
            |  : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.
          li 
            code space-evenly
            |  : items are distributed so that the spacing between any two items (and the space to the edges) is equal.

    +section('main-section align_items', 'align_items') 
      header 
        h2 Align Items
      article
        p This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the 
        code justify-content
        |  version for the cross-axis (perpendicular to the main-axis).
        pre
          +code-css('.container', [['align-items', 'flex-start | flex-end | center | baseline | stretch', '']])
        ul
          li 
            code flex-start
            |  : cross-start margin edge of the items is placed on the cross-start line
          li 
            code flex-end
            |  : cross-end margin edge of the items is placed on the cross-end line
          li 
            code center
            |  : items are centered in the cross-axis
          li 
            code baseline
            |  : items are aligned such as their baselines align
          li 
            code stretch
            |  (default): stretch to fill the container (still respect min-width/max-width)

    +section('main-section align_content', 'align_content') 
      header 
        h2 Align Content
      article
        p This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how 
          code justify-content
          |  aligns individual items within the main-axis.
        p 
          strong Note:
          |  this property has no effect when there is only one line of flex items.
        pre
          +code-css('.container', [['align-content', 'flex-start | flex-end | center | space-between | space-around | stretch', '']])
        ul
          li 
            code flex-start
            |  : lines packed to the start of the container
          li 
            code flex-end
            |  : lines packed to the end of the container
          li 
            code center
            |  : lines packed to the center of the container
          li 
            code space-between
            |  : lines evenly distributed; the first line is at the start of the container while the last one is at the end
          li 
            code space-around
            |  : lines evenly distributed with equal space around each line
          li 
            code stretch
            |  (default): lines stretch to take up the remaining space

    +section('main-section order', 'order')
      header 
        h2 Order
      article
        p By default, flex items are laid out in the source order. However, the order property controls the 
          code order
          |  in which they appear in the flex container.
        pre
          +code-css('.item', [['order', '<integer>', '/* default is 0 */']])

    +section('main-section flex_grow', 'flex_grow') 
      header 
        h2 Flex Grow
      article
        p This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
        p If all items have 
          code flex-grow
          |  set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).
        pre
          +code-css('.item', [['flex-grow', '<number>', '/* default 0 */']])
        p Negative numbers are invalid.

    +section('main-section flex_shrink', 'flex_shrink') 
      header 
        h2 Flex Shrink
      article
        p This defines the ability for a flex item to shrink if necessary.
        pre
          +code-css('.item', [['flex-shrink', '<number>', '/* default 0 */']])
        p Negative numbers are invalid.

    +section('main-section flex_basis', 'flex_basis') 
      header 
        h2 Flex Basis
      article
        p This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The 
          code auto
          |  keyword means "look at my width or height property" (which was temporarily done by the 
          code main-size
          |  keyword until deprecated). The content keyword means "size it based on the item's content" - this keyword isn't well supported yet, so it's hard to test and harder to know what its brethren 
          code max-content
          | , 
          code min-content
          | , and 
          code fit-content
          |  do.
        pre
          +code-css('.item', [['flex-basis', '<length> | auto', '/* default auto */']])
        p If set to 
          code 0
          |  , the extra space around content isn't factored in. If set to 
          code auto
          |  , the extra space is distributed based on its 
          code flex-grow
          |  value. 
          a(href="http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg" target="_blank") See this graphic
          | .

    +section('main-section flex', 'flex') 
      header 
        h2 Flex
      article
        p This is the shorthand for 
          code flex-grow
          | , 
          code flex-shrink
          |  and 
          code flex-basis
          |  combined. The second and third parameters ( 
          code flex-shrink
          |  and 
          code flex-basis
          |  ) are optional. Default is 
          code 0 1 auto
          | .
        pre
          +code-css('.item', [['flex', "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]", '']])
        p 
          strong It is recommended that you use this shorthand property
          |  rather than set the individual properties. The short hand sets the other values intelligently.

    +section('main-section align_self', 'align_self') 
      header 
        h2 Align Self
      article
        p This allows the default alignment (or the one specified by 
          code align-items
          |  ) to be overridden for individual flex items.
        p Please see the 
          code align-items
          |  explanation to understand the available values.
        pre
          +code-css('.item', [['align-self', 'auto | flex-start | flex-end | center | baseline | stretch', '']])
        p Note that 
          code float
          | , 
          code clear
          |  and 
          code vertical-align
          |  have no effect on a flex item.

    +section('main-section reference', 'reference') 
      header 
        h2 Reference
      article
        p All the documentation on this page is taken from: 
          a(href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank") css-tricks.com
        p For more details visit: 
          a(href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank") https://css-tricks.com/snippets/css/a-guide-to-flexbox/

    include partials/footer.pug